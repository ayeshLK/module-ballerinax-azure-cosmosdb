/*
 * Copyright (c) 2023, WSO2 LLC. (http://www.wso2.org)
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'io.ballerina.plugin'
}

description = 'Ballerina - Azure Cosmosdb Ballerina Connector'

def packageName = "azure_cosmosdb"
def packageOrg = "ballerinax"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

apply plugin: 'io.ballerina.plugin'

ballerina {
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
    testCoverageParam = "--code-coverage --coverage-format=xml"
    isConnector = true
    platform = "java17"
}

configurations {
    externalJars
}

dependencies {
    /* Azure dependencies */
    externalJars(group: 'com.azure', name: 'azure-cosmos', version: "${azureCosmosVersion}") {
        transitive = false
    }
    
    /* Netty dependencies */
    externalJars(group: 'io.netty', name: 'netty-resolver-dns', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-handler', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-transport-native-unix-common', version: "${nettyVersion}") {
        transitive = false
    }

    /* Reactor Netty dependencies */
    externalJars(group: 'io.projectreactor.netty', name: 'reactor-netty', version: "${reactorNettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.projectreactor.netty', name: 'reactor-netty-core', version: "${reactorNettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.projectreactor.netty', name: 'reactor-netty-http', version: "${reactorNettyVersion}") {
        transitive = false
    }

    /* Micrometer dependencies */
    externalJars(group: 'io.micrometer', name: 'micrometer-core', version: "${micrometerVersion}") {
        transitive = false
    }
    externalJars(group: 'io.micrometer', name: 'micrometer-observation', version: "${micrometerVersion}") {
        transitive = false
    }
    externalJars(group: 'io.micrometer', name: 'micrometer-commons', version: "${micrometerVersion}") {
        transitive = false
    }
}

task updateTomlFiles {
    doLast {
        def stdlibDependentAzureCosmosVersion = project.azureCosmosVersion
        def stdlibDependentNettyVersion = project.nettyVersion
        def stdlibDependentReactorNettyVersion = project.reactorNettyVersion;
        def stdlibDependentMicrometerVersion = project.micrometerVersion;
        def newConfig = ballerinaTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@azure.cosmosdb.version@", stdlibDependentAzureCosmosVersion)
        newConfig = newConfig.replace("@netty.version@", stdlibDependentNettyVersion)
        newConfig = newConfig.replace("@reactor.netty.version@", stdlibDependentReactorNettyVersion)
        newConfig = newConfig.replace("@micrometer.version@", stdlibDependentMicrometerVersion)
        ballerinaTomlFile.text = newConfig
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the native jar versions\" Ballerina.toml Dependencies.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the native jar versions' Ballerina.toml Dependencies.toml"
            }
        }
    }
}

build.dependsOn copyToLib
build.dependsOn ":azure-cosmosdb-native:build"
test.dependsOn ":azure-cosmosdb-native:build"
